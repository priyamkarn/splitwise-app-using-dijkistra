#include <iostream>
#include <vector>
#include <queue>
#include <limits>
#include <utility>
#include <algorithm>
using namespace std;
//sink is final destination.
struct Edge {
    int from, to, capacity, cost;
};

vector<Edge> edges;
vector<int> graph[1005]; // adjacency list
int dist[1005], parent[1005], edgeIndex[1005];
bool inQueue[1005];

void addEdge(int from, int to, int capacity, int cost) {
    Edge e = {from, to, capacity, cost};
    edges.push_back(e);
    graph[from].push_back(edges.size()-1);
    Edge e1 = {to, from, 0, -cost};
    edges.push_back(e1);
    graph[to].push_back(edges.size()-1);
}

bool dijkstra(int source, int sink) {
    for(int i=0; i<1005; i++) {
        dist[i] = numeric_limits<int>::max();
        inQueue[i] = false;
    }
    dist[source] = 0;
    priority_queue<pair<int, int>, vector<pair<int, int> >, greater<pair<int, int> > > pq;
    pq.push(make_pair(dist[source], source));
    while(!pq.empty()) {
        int u = pq.top().second;
        pq.pop();
        if(inQueue[u]) continue;
        inQueue[u] = true;
        for(int i=0; i<graph[u].size(); i++) {
            Edge& e = edges[graph[u][i]];
            if(e.capacity > 0 && dist[u]+e.cost < dist[e.to]) {
                dist[e.to] = dist[u]+e.cost;
                parent[e.to] = u;
                edgeIndex[e.to] = i;
                pq.push(make_pair(dist[e.to], e.to));
            }
        }
    }
    return dist[sink] < numeric_limits<int>::max();
    //return true if path exist and false otherwise;
}

pair<int, int> minCostFlow(int source, int sink) {
    int flow = 0;
    int cost = 0;
    while(dijkstra(source, sink)) {
        int f = numeric_limits<int>::max();
        for(int u=sink; u!=source; u=parent[u]) {
            Edge& e = edges[graph[parent[u]][edgeIndex[u]]];
            f = min(f, e.capacity);
        }
        flow += f;
        cost += dist[sink]*f;
        for(int u=sink; u!=source; u=parent[u]) {
            Edge& e = edges[graph[parent[u]][edgeIndex[u]]];
            e.capacity -= f;
            edges[graph[parent[u]][edgeIndex[u]]^1].capacity += f;
        }
    }
    return make_pair(flow, cost);
}

int main() {
    int n = 4; // number of nodes
    int source = 0;
    int sink = n-1;
    addEdge(0, 1, 2, 1); // from, to, capacity, cost
    addEdge(0, 2, 1, 3);
    addEdge(1, 2, 1, 1);
    addEdge(1, 3, 1, 3);
    addEdge(2, 3, 2, 1);
    pair<int, int> ans = minCostFlow(source, sink);
    cout << "Maximum flow: " << ans.first << endl;
    cout << "Minimum cost: " << ans.second << endl;
    return 0;
}
